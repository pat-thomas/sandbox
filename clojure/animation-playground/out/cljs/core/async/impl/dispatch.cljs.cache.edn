;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name cljs.core.async.impl.dispatch, :imports nil, :requires {cljs.core.async.impl.buffers cljs.core.async.impl.buffers, buffers cljs.core.async.impl.buffers}, :uses nil, :defs {queue-delay {:protocol-inline nil, :meta {:arglists (quote ([f delay])), :end-column 18, :end-line 45, :column 7, :line 45, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async/impl/dispatch.cljs"}, :name cljs.core.async.impl.dispatch/queue-delay, :variadic false, :file "out/cljs/core/async/impl/dispatch.cljs", :end-column 18, :method-params ([f delay]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f delay])), :test true}, run {:protocol-inline nil, :meta {:arglists (quote ([f])), :end-column 10, :end-line 41, :column 7, :line 41, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async/impl/dispatch.cljs"}, :name cljs.core.async.impl.dispatch/run, :variadic false, :file "out/cljs/core/async/impl/dispatch.cljs", :end-column 10, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, process-messages {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 23, :end-line 13, :column 7, :line 13, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async/impl/dispatch.cljs"}, :name cljs.core.async.impl.dispatch/process-messages, :variadic false, :file "out/cljs/core/async/impl/dispatch.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, queue-dispatcher {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 23, :end-line 32, :column 7, :line 32, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async/impl/dispatch.cljs"}, :name cljs.core.async.impl.dispatch/queue-dispatcher, :variadic false, :file "out/cljs/core/async/impl/dispatch.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, TASK_BATCH_SIZE {:meta {:end-column 21, :end-line 9, :column 6, :line 9, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async/impl/dispatch.cljs"}, :file "out/cljs/core/async/impl/dispatch.cljs", :line 9, :column 1, :end-line 9, :end-column 21, :test true, :name cljs.core.async.impl.dispatch/TASK_BATCH_SIZE}, queued? {:meta {:boolean true, :end-column 23, :end-line 7, :column 16, :line 7, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async/impl/dispatch.cljs"}, :file "out/cljs/core/async/impl/dispatch.cljs", :line 7, :column 1, :end-line 7, :end-column 23, :boolean true, :test true, :name cljs.core.async.impl.dispatch/queued?}, running? {:meta {:boolean true, :end-column 24, :end-line 6, :column 16, :line 6, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async/impl/dispatch.cljs"}, :file "out/cljs/core/async/impl/dispatch.cljs", :line 6, :column 1, :end-line 6, :end-column 24, :boolean true, :test true, :name cljs.core.async.impl.dispatch/running?}, tasks {:meta {:end-column 11, :end-line 5, :column 6, :line 5, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async/impl/dispatch.cljs"}, :file "out/cljs/core/async/impl/dispatch.cljs", :line 5, :column 1, :end-line 5, :end-column 11, :test true, :name cljs.core.async.impl.dispatch/tasks}, message-channel {:meta {:end-column 21, :end-line 4, :column 6, :line 4, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async/impl/dispatch.cljs"}, :file "out/cljs/core/async/impl/dispatch.cljs", :line 4, :column 1, :end-line 4, :end-column 21, :test true, :name cljs.core.async.impl.dispatch/message-channel}}, :require-macros nil, :cljs.analyzer/constants {:order [:else], :seen #{:else}}, :doc nil}