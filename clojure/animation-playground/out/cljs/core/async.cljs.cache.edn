;; Analyzed by ClojureScript 0.0-3211
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{reduce take map into partition merge partition-by}, :name cljs.core.async, :imports nil, :requires {cljs.core.async.impl.channels cljs.core.async.impl.channels, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, helpers cljs.core.async.impl.ioc-helpers, impl cljs.core.async.impl.protocols, channels cljs.core.async.impl.channels, cljs.core.async.impl.buffers cljs.core.async.impl.buffers, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, timers cljs.core.async.impl.timers, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.ioc-helpers cljs.core.async.impl.ioc-helpers, buffers cljs.core.async.impl.buffers, cljs.core.async.impl.timers cljs.core.async.impl.timers}, :uses nil, :defs {Pub {:meta {:protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}, :protocol-symbol true, :doc nil, :end-column 17, :end-line 583, :column 14, :line 583, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol-symbol true, :name cljs.core.async/Pub, :file "out/cljs/core/async.cljs", :end-column 17, :column 1, :line 583, :protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}, :info nil, :end-line 583, :impls #{cljs.core.async/t22932}, :doc nil, :test true}, reduce {:protocol-inline nil, :meta {:arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result.", :end-column 13, :end-line 364, :column 7, :line 364, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/reduce, :variadic false, :file "out/cljs/core/async.cljs", :end-column 13, :method-params ([f init ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 364, :end-line 364, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result.", :test true}, remove> {:protocol-inline nil, :meta {:arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns false to the\n  target channel.", :end-column 14, :end-line 254, :column 7, :line 254, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/remove>, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([p ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns false to the\n  target channel.", :test true}, timeout {:protocol-inline nil, :meta {:arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs", :end-column 14, :end-line 53, :column 7, :line 53, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/timeout, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([msecs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs", :test true}, unsub* {:protocol-inline nil, :meta {:arglists (quote ([p v ch])), :doc nil, :protocol cljs.core.async/Pub, :end-column 10, :end-line 585, :column 4, :line 585, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 10, :method-params ([p v ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 583, :end-line 585, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p v ch])), :doc nil, :test true}, admix* {:protocol-inline nil, :meta {:arglists (quote ([m ch])), :doc nil, :protocol cljs.core.async/Mix, :end-column 10, :end-line 475, :column 4, :line 475, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mix, :name cljs.core.async/admix*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 475, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil, :test true}, unmix* {:protocol-inline nil, :meta {:arglists (quote ([m ch])), :doc nil, :protocol cljs.core.async/Mix, :end-column 10, :end-line 476, :column 4, :line 476, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mix, :name cljs.core.async/unmix*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 476, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil, :test true}, mapcat* {:protocol-inline nil, :meta {:arglists (quote ([f in out])), :private true, :end-column 15, :end-line 288, :column 8, :line 288, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :private true, :name cljs.core.async/mapcat*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 15, :method-params ([f in out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f in out])), :test true}, ->t21634 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ch f map> meta21635])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21634, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ch f map> meta21635]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 223, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch f map> meta21635])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, mix {:protocol-inline nil, :meta {:arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n", :end-column 10, :end-line 481, :column 7, :line 481, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/mix, :variadic false, :file "out/cljs/core/async.cljs", :end-column 10, :method-params ([out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 481, :end-line 481, :max-fixed-arity 1, :fn-var true, :arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n", :test true}, pub {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :arglists-meta (nil nil)}, :arglists (quote ([ch topic-fn] [ch topic-fn buf-fn])), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source.", :end-column 10, :end-line 588, :column 7, :line 588, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/pub, :variadic false, :file "out/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :arglists-meta (nil nil)}, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 588, :end-line 588, :max-fixed-arity 3, :fn-var true, :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source.", :test true}, take {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}, :arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :end-column 11, :end-line 728, :column 7, :line 728, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/take, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([n ch] [n ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 728, :end-line 728, :max-fixed-arity 3, :fn-var true, :arglists ([n ch] [n ch buf-or-n]), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :test true}, unsub-all* {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p v]), :arglists ([p] [p v]), :arglists-meta (nil nil)}, :arglists (quote ([p] [p v])), :doc nil, :protocol cljs.core.async/Pub, :end-column 14, :end-line 586, :column 4, :line 586, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub-all*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p v]), :arglists ([p] [p v]), :arglists-meta (nil nil)}, :method-params ([p] [p v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 583, :end-line 586, :max-fixed-arity 2, :fn-var true, :arglists ([p] [p v]), :doc nil, :test true}, <! {:protocol-inline nil, :meta {:arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available.", :end-column 9, :end-line 58, :column 7, :line 58, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/<!, :variadic false, :file "out/cljs/core/async.cljs", :end-column 9, :method-params ([port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available.", :test true}, map {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f chs] [f chs buf-or-n]), :arglists ([f chs] [f chs buf-or-n]), :arglists-meta (nil nil)}, :arglists (quote ([f chs] [f chs buf-or-n])), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied", :end-column 10, :end-line 666, :column 7, :line 666, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/map, :variadic false, :file "out/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f chs] [f chs buf-or-n]), :arglists ([f chs] [f chs buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f chs] [f chs buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 666, :end-line 666, :max-fixed-arity 3, :fn-var true, :arglists ([f chs] [f chs buf-or-n]), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied", :test true}, Mux {:meta {:protocol-info {:methods {muxch* [[_]]}}, :protocol-symbol true, :doc nil, :end-column 17, :end-line 404, :column 14, :line 404, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol-symbol true, :name cljs.core.async/Mux, :file "out/cljs/core/async.cljs", :end-column 17, :column 1, :line 404, :protocol-info {:methods {muxch* [[_]]}}, :info nil, :end-line 404, :impls #{cljs.core.async/t22786 cljs.core.async/t22171 cljs.core.async/t22394 cljs.core.async/t22677 cljs.core.async/t22932}, :doc nil, :test true}, t21628 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21628, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 197, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat> {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f out] [f out buf-or-n]), :arglists ([f out] [f out buf-or-n]), :arglists-meta (nil nil)}, :arglists (quote ([f out] [f out buf-or-n])), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value put, then supplies each element of the result\n  to the target channel. f must return a collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The target channel will be closed when the source\n  channel closes.", :end-column 14, :end-line 313, :column 7, :line 313, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/mapcat>, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f out] [f out buf-or-n]), :arglists ([f out] [f out buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f out] [f out buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 313, :end-line 313, :max-fixed-arity 3, :fn-var true, :arglists ([f out] [f out buf-or-n]), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value put, then supplies each element of the result\n  to the target channel. f must return a collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The target channel will be closed when the source\n  channel closes.", :test true}, t22932 {:num-fields 6, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t22932, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 14, :line 617, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t21625 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([fn1 _ meta21623 map< f ch meta21626])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21625, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([fn1 _ meta21623 map< f ch meta21626]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :line 205, :max-fixed-arity 7, :fn-var true, :arglists (quote ([fn1 _ meta21623 map< f ch meta21626])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t22677 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta22678])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t22677, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta22678]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 526, :max-fixed-arity 11, :fn-var true, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta22678])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, buffer {:protocol-inline nil, :meta {:arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park.", :end-column 13, :end-line 17, :column 7, :line 17, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/buffer, :variadic false, :file "out/cljs/core/async.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park.", :test true}, close! {:protocol-inline nil, :meta {:arglists (quote ([port])), :end-column 13, :end-line 102, :column 7, :line 102, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/close!, :variadic false, :file "out/cljs/core/async.cljs", :end-column 13, :method-params ([port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port])), :test true}, ->t21622 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ch f map< meta21623])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21622, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ch f map< meta21623]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 197, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch f map< meta21623])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t21637 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21637, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 223, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t21637 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ch f map> meta21638])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21637, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ch f map> meta21638]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 223, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch f map> meta21638])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t22394 {:num-fields 4, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t22394, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 426, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, chan {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [buf-or-n]), :arglists ([] [buf-or-n]), :arglists-meta (nil nil)}, :arglists (quote ([] [buf-or-n])), :doc "Creates a channel with an optional buffer. If buf-or-n is a number,\n  will create and use a fixed buffer of that size.", :end-column 11, :end-line 41, :column 7, :line 41, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/chan, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [buf-or-n]), :arglists ([] [buf-or-n]), :arglists-meta (nil nil)}, :method-params ([] [buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists ([] [buf-or-n]), :doc "Creates a channel with an optional buffer. If buf-or-n is a number,\n  will create and use a fixed buffer of that size.", :test true}, solo-mode* {:protocol-inline nil, :meta {:arglists (quote ([m mode])), :doc nil, :protocol cljs.core.async/Mix, :end-column 14, :end-line 479, :column 4, :line 479, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mix, :name cljs.core.async/solo-mode*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([m mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 479, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m mode])), :doc nil, :test true}, tap {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([mult ch] [mult ch close?]), :arglists ([mult ch] [mult ch close?]), :arglists-meta (nil nil)}, :arglists (quote ([mult ch] [mult ch close?])), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :end-column 10, :end-line 457, :column 7, :line 457, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/tap, :variadic false, :file "out/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([mult ch] [mult ch close?]), :arglists ([mult ch] [mult ch close?]), :arglists-meta (nil nil)}, :method-params ([mult ch] [mult ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 457, :end-line 457, :max-fixed-arity 3, :fn-var true, :arglists ([mult ch] [mult ch close?]), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :test true}, admix {:protocol-inline nil, :meta {:arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix", :end-column 12, :end-line 550, :column 7, :line 550, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/admix, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([mix ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 550, :end-line 550, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix", :test true}, unique {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ch] [ch buf-or-n]), :arglists ([ch] [ch buf-or-n]), :arglists-meta (nil nil)}, :arglists (quote ([ch] [ch buf-or-n])), :doc "Returns a channel that will contain values from ch. Consecutive duplicate\n   values will be dropped.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :end-column 13, :end-line 747, :column 7, :line 747, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/unique, :variadic false, :file "out/cljs/core/async.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ch] [ch buf-or-n]), :arglists ([ch] [ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([ch] [ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 747, :end-line 747, :max-fixed-arity 2, :fn-var true, :arglists ([ch] [ch buf-or-n]), :doc "Returns a channel that will contain values from ch. Consecutive duplicate\n   values will be dropped.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :test true}, muxch* {:protocol-inline nil, :meta {:arglists (quote ([_])), :doc nil, :protocol cljs.core.async/Mux, :end-column 10, :end-line 405, :column 4, :line 405, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mux, :name cljs.core.async/muxch*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 10, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 405, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil, :test true}, solo-mode {:protocol-inline nil, :meta {:arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause", :end-column 16, :end-line 577, :column 7, :line 577, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/solo-mode, :variadic false, :file "out/cljs/core/async.cljs", :end-column 16, :method-params ([mix mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 577, :end-line 577, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause", :test true}, onto-chan {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch coll] [ch coll close?]), :arglists ([ch coll] [ch coll close?]), :arglists-meta (nil nil)}, :arglists (quote ([ch coll] [ch coll close?])), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied.", :end-column 16, :end-line 378, :column 7, :line 378, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/onto-chan, :variadic false, :file "out/cljs/core/async.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch coll] [ch coll close?]), :arglists ([ch coll] [ch coll close?]), :arglists-meta (nil nil)}, :method-params ([ch coll] [ch coll close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 378, :end-line 378, :max-fixed-arity 3, :fn-var true, :arglists ([ch coll] [ch coll close?]), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied.", :test true}, to-chan {:protocol-inline nil, :meta {:arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted.", :end-column 14, :end-line 395, :column 7, :line 395, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/to-chan, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 395, :end-line 395, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted.", :test true}, dropping-buffer {:protocol-inline nil, :meta {:arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer).", :end-column 22, :end-line 22, :column 7, :line 22, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/dropping-buffer, :variadic false, :file "out/cljs/core/async.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer).", :test true}, untap-all {:protocol-inline nil, :meta {:arglists (quote ([mult])), :doc "Disconnects all target channels from a mult", :end-column 16, :end-line 470, :column 7, :line 470, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/untap-all, :variadic false, :file "out/cljs/core/async.cljs", :end-column 16, :method-params ([mult]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 470, :end-line 470, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mult])), :doc "Disconnects all target channels from a mult", :test true}, ->t21581 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([f fn-handler meta21582])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21581, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([f fn-handler meta21582]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f fn-handler meta21582])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, into {:protocol-inline nil, :meta {:arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result.", :end-column 11, :end-line 720, :column 7, :line 720, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/into, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([coll ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 720, :end-line 720, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result.", :test true}, ->t21640 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ch p filter> meta21641])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21640, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ch p filter> meta21641]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 241, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch p filter> meta21641])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t21603 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([flag alt-flag meta21604])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21603, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([flag alt-flag meta21604]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 123, :max-fixed-arity 3, :fn-var true, :arglists (quote ([flag alt-flag meta21604])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t21643 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ch p filter> meta21644])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21643, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ch p filter> meta21644]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 241, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch p filter> meta21644])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t22677 {:num-fields 11, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t22677, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 526, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, sub {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p topic ch] [p topic ch close?]), :arglists ([p topic ch] [p topic ch close?]), :arglists-meta (nil nil)}, :arglists (quote ([p topic ch] [p topic ch close?])), :doc "Subscribes a channel to a topic of a pub.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :end-column 10, :end-line 645, :column 7, :line 645, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/sub, :variadic false, :file "out/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p topic ch] [p topic ch close?]), :arglists ([p topic ch] [p topic ch close?]), :arglists-meta (nil nil)}, :method-params ([p topic ch] [p topic ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 645, :end-line 645, :max-fixed-arity 4, :fn-var true, :arglists ([p topic ch] [p topic ch close?]), :doc "Subscribes a channel to a topic of a pub.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :test true}, alt-flag {:protocol-inline nil, :meta {:arglists (quote ([])), :private true, :end-column 16, :end-line 121, :column 8, :line 121, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :private true, :name cljs.core.async/alt-flag, :variadic false, :file "out/cljs/core/async.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, map> {:protocol-inline nil, :meta {:arglists (quote ([f ch])), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value before supplying it to the target channel.", :end-column 11, :end-line 219, :column 7, :line 219, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/map>, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([f ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f ch])), :doc "Takes a function and a target channel, and returns a channel which\n  applies f to each value before supplying it to the target channel.", :test true}, t22171 {:num-fields 4, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t22171, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 426, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t21609 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21609, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 131, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t21584 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21584, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 12, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, pipe {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([from to] [from to close?]), :arglists ([from to] [from to close?]), :arglists-meta (nil nil)}, :arglists (quote ([from to] [from to close?])), :doc "Takes elements from the from channel and supplies them to the to\n  channel. By default, the to channel will be closed when the\n  from channel closes, but can be determined by the close?\n  parameter.", :end-column 11, :end-line 328, :column 7, :line 328, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/pipe, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([from to] [from to close?]), :arglists ([from to] [from to close?]), :arglists-meta (nil nil)}, :method-params ([from to] [from to close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 3, :fn-var true, :arglists ([from to] [from to close?]), :doc "Takes elements from the from channel and supplies them to the to\n  channel. By default, the to channel will be closed when the\n  from channel closes, but can be determined by the close?\n  parameter.", :test true}, t21622 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21622, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 197, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t21631 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([fn1 _ meta21629 map< f ch meta21632])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21631, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([fn1 _ meta21629 map< f ch meta21632]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :line 205, :max-fixed-arity 7, :fn-var true, :arglists (quote ([fn1 _ meta21629 map< f ch meta21632])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, unmix {:protocol-inline nil, :meta {:arglists (quote ([mix ch])), :doc "Removes ch as an input to the mix", :end-column 12, :end-line 555, :column 7, :line 555, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/unmix, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([mix ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 555, :end-line 555, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix ch])), :doc "Removes ch as an input to the mix", :test true}, filter< {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p ch] [p ch buf-or-n]), :arglists ([p ch] [p ch buf-or-n]), :arglists-meta (nil nil)}, :arglists (quote ([p ch] [p ch buf-or-n])), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns true. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes.", :end-column 14, :end-line 261, :column 7, :line 261, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/filter<, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p ch] [p ch buf-or-n]), :arglists ([p ch] [p ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([p ch] [p ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 261, :end-line 261, :max-fixed-arity 3, :fn-var true, :arglists ([p ch] [p ch buf-or-n]), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns true. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes.", :test true}, t21625 {:num-fields 7, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21625, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 10, :line 205, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, sub* {:protocol-inline nil, :meta {:arglists (quote ([p v ch close?])), :doc nil, :protocol cljs.core.async/Pub, :end-column 8, :end-line 584, :column 4, :line 584, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Pub, :name cljs.core.async/sub*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 8, :method-params ([p v ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 583, :end-line 584, :max-fixed-arity 4, :fn-var true, :arglists (quote ([p v ch close?])), :doc nil, :test true}, t21643 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21643, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 241, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t21628 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ch f map< meta21629])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21628, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ch f map< meta21629]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 197, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ch f map< meta21629])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, remove< {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p ch] [p ch buf-or-n]), :arglists ([p ch] [p ch buf-or-n]), :arglists-meta (nil nil)}, :arglists (quote ([p ch] [p ch buf-or-n])), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns false. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes.", :end-column 14, :end-line 279, :column 7, :line 279, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/remove<, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p ch] [p ch buf-or-n]), :arglists ([p ch] [p ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([p ch] [p ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 3, :fn-var true, :arglists ([p ch] [p ch buf-or-n]), :doc "Takes a predicate and a source channel, and returns a channel which\n  contains only the values taken from the source channel for which the\n  predicate returns false. The returned channel will be unbuffered by\n  default, or a buf-or-n can be supplied. The channel will close\n  when the source channel closes.", :test true}, untap* {:protocol-inline nil, :meta {:arglists (quote ([m ch])), :doc nil, :protocol cljs.core.async/Mult, :end-column 10, :end-line 409, :column 4, :line 409, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mult, :name cljs.core.async/untap*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 407, :end-line 409, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil, :test true}, ->t21612 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([cb flag alt-handler meta21613])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21612, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([cb flag alt-handler meta21613]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 131, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cb flag alt-handler meta21613])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, toggle {:protocol-inline nil, :meta {:arglists (quote ([mix state-map])), :doc "Atomically sets the state(s) of one or more channels in a mix. The\n  state map is a map of channels -> channel-state-map. A\n  channel-state-map is a map of attrs -> boolean, where attr is one or\n  more of :mute, :pause or :solo. Any states supplied are merged with\n  the current state.\n\n  Note that channels can be added to a mix via toggle, which can be\n  used to add channels in a particular (e.g. paused) state.", :end-column 13, :end-line 565, :column 7, :line 565, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/toggle, :variadic false, :file "out/cljs/core/async.cljs", :end-column 13, :method-params ([mix state-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 565, :end-line 565, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix state-map])), :doc "Atomically sets the state(s) of one or more channels in a mix. The\n  state map is a map of channels -> channel-state-map. A\n  channel-state-map is a map of attrs -> boolean, where attr is one or\n  more of :mute, :pause or :solo. Any states supplied are merged with\n  the current state.\n\n  Note that channels can be added to a mix via toggle, which can be\n  used to add channels in a particular (e.g. paused) state.", :test true}, untap-all* {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc nil, :protocol cljs.core.async/Mult, :end-column 14, :end-line 410, :column 4, :line 410, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mult, :name cljs.core.async/untap-all*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 407, :end-line 410, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc nil, :test true}, ->t21606 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([flag alt-flag meta21607])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21606, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([flag alt-flag meta21607]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 123, :max-fixed-arity 3, :fn-var true, :arglists (quote ([flag alt-flag meta21607])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t21609 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([cb flag alt-handler meta21610])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21609, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([cb flag alt-handler meta21610]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 131, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cb flag alt-handler meta21610])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, sliding-buffer {:protocol-inline nil, :meta {:arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete, and be\n  buffered, but oldest elements in buffer will be dropped (not\n  transferred).", :end-column 21, :end-line 28, :column 7, :line 28, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/sliding-buffer, :variadic false, :file "out/cljs/core/async.cljs", :end-column 21, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete, and be\n  buffered, but oldest elements in buffer will be dropped (not\n  transferred).", :test true}, partition {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}, :arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will contain vectors of n items taken from ch. The\n   final vector in the return channel may be smaller than n if ch closed before\n   the vector could be completely filled.\n\n   The output channel is unbuffered by default, unless buf-or-n is given", :end-column 16, :end-line 767, :column 7, :line 767, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/partition, :variadic false, :file "out/cljs/core/async.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([n ch] [n ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 767, :end-line 767, :max-fixed-arity 3, :fn-var true, :arglists ([n ch] [n ch buf-or-n]), :doc "Returns a channel that will contain vectors of n items taken from ch. The\n   final vector in the return channel may be smaller than n if ch closed before\n   the vector could be completely filled.\n\n   The output channel is unbuffered by default, unless buf-or-n is given", :test true}, ->t21584 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([f fn-handler meta21585])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t21584, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([f fn-handler meta21585]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f fn-handler meta21585])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, Mult {:meta {:protocol-info {:methods {tap* [[m ch close?]], untap* [[m ch]], untap-all* [[m]]}}, :protocol-symbol true, :doc nil, :end-column 18, :end-line 407, :column 14, :line 407, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol-symbol true, :name cljs.core.async/Mult, :file "out/cljs/core/async.cljs", :end-column 18, :column 1, :line 407, :protocol-info {:methods {tap* [[m ch close?]], untap* [[m ch]], untap-all* [[m]]}}, :info nil, :end-line 407, :impls #{cljs.core.async/t22171 cljs.core.async/t22394}, :doc nil, :test true}, merge {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([chs] [chs buf-or-n]), :arglists ([chs] [chs buf-or-n]), :arglists-meta (nil nil)}, :arglists (quote ([chs] [chs buf-or-n])), :doc "Takes a collection of source channels and returns a channel which\n  contains all values taken from them. The returned channel will be\n  unbuffered by default, or a buf-or-n can be supplied. The channel\n  will close after all the source channels have closed.", :end-column 12, :end-line 702, :column 7, :line 702, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/merge, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([chs] [chs buf-or-n]), :arglists ([chs] [chs buf-or-n]), :arglists-meta (nil nil)}, :method-params ([chs] [chs buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 702, :end-line 702, :max-fixed-arity 2, :fn-var true, :arglists ([chs] [chs buf-or-n]), :doc "Takes a collection of source channels and returns a channel which\n  contains all values taken from them. The returned channel will be\n  unbuffered by default, or a buf-or-n can be supplied. The channel\n  will close after all the source channels have closed.", :test true}, ->t22932 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ensure-mult mults buf-fn topic-fn ch meta22933])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t22932, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([ensure-mult mults buf-fn topic-fn ch meta22933]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 14, :factory :positional, :line 617, :max-fixed-arity 6, :fn-var true, :arglists (quote ([ensure-mult mults buf-fn topic-fn ch meta22933])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t22786 {:num-fields 11, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t22786, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 526, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, partition-by {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f ch] [f ch buf-or-n]), :arglists ([f ch] [f ch buf-or-n]), :arglists-meta (nil nil)}, :arglists (quote ([f ch] [f ch buf-or-n])), :doc "Returns a channel that will contain vectors of items taken from ch. New\n   vectors will be created whenever (f itm) returns a value that differs from\n   the previous item's (f itm).\n\n  The output channel is unbuffered, unless buf-or-n is given", :end-column 19, :end-line 793, :column 7, :line 793, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/partition-by, :variadic false, :file "out/cljs/core/async.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f ch] [f ch buf-or-n]), :arglists ([f ch] [f ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f ch] [f ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 793, :end-line 793, :max-fixed-arity 3, :fn-var true, :arglists ([f ch] [f ch buf-or-n]), :doc "Returns a channel that will contain vectors of items taken from ch. New\n   vectors will be created whenever (f itm) returns a value that differs from\n   the previous item's (f itm).\n\n  The output channel is unbuffered, unless buf-or-n is given", :test true}, unsub-all {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p topic]), :arglists ([p] [p topic]), :arglists-meta (nil nil)}, :arglists (quote ([p] [p topic])), :doc "Unsubscribes all channels from a pub, or a topic of a pub", :end-column 16, :end-line 658, :column 7, :line 658, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/unsub-all, :variadic false, :file "out/cljs/core/async.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p topic]), :arglists ([p] [p topic]), :arglists-meta (nil nil)}, :method-params ([p] [p topic]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 658, :end-line 658, :max-fixed-arity 2, :fn-var true, :arglists ([p] [p topic]), :doc "Unsubscribes all channels from a pub, or a topic of a pub", :test true}, >! {:protocol-inline nil, :meta {:arglists (quote ([port val])), :doc "puts a val into port. nil values are not allowed. Must be called\n  inside a (go ...) block. Will park if no buffer space is available.", :end-column 9, :end-line 81, :column 7, :line 81, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/>!, :variadic false, :file "out/cljs/core/async.cljs", :end-column 9, :method-params ([port val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([port val])), :doc "puts a val into port. nil values are not allowed. Must be called\n  inside a (go ...) block. Will park if no buffer space is available.", :test true}, t21612 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21612, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 131, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t22171 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([cs ch mult meta22172])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t22171, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([cs ch mult meta22172]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 426, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cs ch mult meta22172])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t21634 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21634, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 223, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t21640 {:num-fields 4, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21640, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 241, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unmix-all* {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc nil, :protocol cljs.core.async/Mix, :end-column 14, :end-line 477, :column 4, :line 477, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mix, :name cljs.core.async/unmix-all*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 477, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc nil, :test true}, nop {:protocol-inline nil, :meta {:arglists (quote ([])), :private true, :end-column 11, :end-line 79, :column 8, :line 79, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :private true, :name cljs.core.async/nop, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, split {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p ch] [p ch t-buf-or-n f-buf-or-n]), :arglists ([p ch] [p ch t-buf-or-n f-buf-or-n]), :arglists-meta (nil nil)}, :arglists (quote ([p ch] [p ch t-buf-or-n f-buf-or-n])), :doc "Takes a predicate and a source channel and returns a vector of two\n  channels, the first of which will contain the values for which the\n  predicate returned true, the second those for which it returned\n  false.\n\n  The out channels will be unbuffered by default, or two buf-or-ns can\n  be supplied. The channels will close after the source channel has\n  closed.", :end-column 12, :end-line 343, :column 7, :line 343, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/split, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p ch] [p ch t-buf-or-n f-buf-or-n]), :arglists ([p ch] [p ch t-buf-or-n f-buf-or-n]), :arglists-meta (nil nil)}, :method-params ([p ch] [p ch t-buf-or-n f-buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 4, :fn-var true, :arglists ([p ch] [p ch t-buf-or-n f-buf-or-n]), :doc "Takes a predicate and a source channel and returns a vector of two\n  channels, the first of which will contain the values for which the\n  predicate returned true, the second those for which it returned\n  false.\n\n  The out channels will be unbuffered by default, or two buf-or-ns can\n  be supplied. The channels will close after the source channel has\n  closed.", :test true}, unmix-all {:protocol-inline nil, :meta {:arglists (quote ([mix])), :doc "removes all inputs from the mix", :end-column 16, :end-line 560, :column 7, :line 560, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/unmix-all, :variadic false, :file "out/cljs/core/async.cljs", :end-column 16, :method-params ([mix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 560, :end-line 560, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mix])), :doc "removes all inputs from the mix", :test true}, filter> {:protocol-inline nil, :meta {:arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns true to the\n  target channel.", :end-column 14, :end-line 236, :column 7, :line 236, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/filter>, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([p ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p ch])), :doc "Takes a predicate and a target channel, and returns a channel which\n  supplies only the values for which the predicate returns true to the\n  target channel.", :test true}, tap* {:protocol-inline nil, :meta {:arglists (quote ([m ch close?])), :doc nil, :protocol cljs.core.async/Mult, :end-column 8, :end-line 408, :column 4, :line 408, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mult, :name cljs.core.async/tap*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 8, :method-params ([m ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 407, :end-line 408, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m ch close?])), :doc nil, :test true}, untap {:protocol-inline nil, :meta {:arglists (quote ([mult ch])), :doc "Disconnects a target channel from a mult", :end-column 12, :end-line 465, :column 7, :line 465, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/untap, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([mult ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 465, :end-line 465, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mult ch])), :doc "Disconnects a target channel from a mult", :test true}, t21581 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21581, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 3, :line 12, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alt-handler {:protocol-inline nil, :meta {:arglists (quote ([flag cb])), :private true, :end-column 19, :end-line 130, :column 8, :line 130, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :private true, :name cljs.core.async/alt-handler, :variadic false, :file "out/cljs/core/async.cljs", :end-column 19, :method-params ([flag cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([flag cb])), :test true}, alts! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ports {:as opts})], :arglists [[ports & {:as opts}]], :arglists-meta (nil)}, :arglists (quote ([ports & {:as opts}])), :doc "Completes at most one of several channel operations. Must be called\n  inside a (go ...) block. ports is a vector of channel endpoints, which\n  can be either a channel to take from or a vector of\n  [channel-to-put-to val-to-put], in any combination. Takes will be\n  made as if by <!, and puts will be made as if by >!. Unless\n  the :priority option is true, if more than one port operation is\n  ready a non-deterministic choice will be made. If no operation is\n  ready and a :default value is supplied, [default-val :default] will\n  be returned, otherwise alts! will park until the first operation to\n  become ready completes. Returns [val port] of the completed\n  operation, where val is the value taken for takes, and nil for puts.\n\n  opts are passed as :key val ... Supported options:\n\n  :default val - the value to use if none of the operations are immediately ready\n  :priority true - (default nil) when true, the operations will be tried in order.\n\n  Note: there is no guarantee that the port exps or val exprs will be\n  used, nor in what order should they be, so they should not be\n  depended upon for side effects.", :end-column 12, :end-line 164, :column 7, :line 164, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/alts!, :variadic true, :file "out/cljs/core/async.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ports {:as opts})], :arglists [[ports & {:as opts}]], :arglists-meta (nil)}, :method-params [(ports {:as opts})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists [[ports & {:as opts}]], :doc "Completes at most one of several channel operations. Must be called\n  inside a (go ...) block. ports is a vector of channel endpoints, which\n  can be either a channel to take from or a vector of\n  [channel-to-put-to val-to-put], in any combination. Takes will be\n  made as if by <!, and puts will be made as if by >!. Unless\n  the :priority option is true, if more than one port operation is\n  ready a non-deterministic choice will be made. If no operation is\n  ready and a :default value is supplied, [default-val :default] will\n  be returned, otherwise alts! will park until the first operation to\n  become ready completes. Returns [val port] of the completed\n  operation, where val is the value taken for takes, and nil for puts.\n\n  opts are passed as :key val ... Supported options:\n\n  :default val - the value to use if none of the operations are immediately ready\n  :priority true - (default nil) when true, the operations will be tried in order.\n\n  Note: there is no guarantee that the port exps or val exprs will be\n  used, nor in what order should they be, so they should not be\n  depended upon for side effects.", :test true}, t21631 {:num-fields 7, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21631, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 10, :line 205, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unsub {:protocol-inline nil, :meta {:arglists (quote ([p topic ch])), :doc "Unsubscribes a channel from a topic of a pub", :end-column 12, :end-line 653, :column 7, :line 653, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/unsub, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :method-params ([p topic ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 653, :end-line 653, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p topic ch])), :doc "Unsubscribes a channel from a topic of a pub", :test true}, map< {:protocol-inline nil, :meta {:arglists (quote ([f ch])), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values produced by applying f to each value taken from\n  the source channel", :end-column 11, :end-line 192, :column 7, :line 192, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/map<, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([f ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f ch])), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values produced by applying f to each value taken from\n  the source channel", :test true}, fn-handler {:protocol-inline nil, :meta {:arglists (quote ([f])), :private true, :end-column 18, :end-line 11, :column 8, :line 11, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :private true, :name cljs.core.async/fn-handler, :variadic false, :file "out/cljs/core/async.cljs", :end-column 18, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, do-alts {:protocol-inline nil, :meta {:arglists (quote ([fret ports opts])), :doc "returns derefable [val port] if immediate, nil if enqueued", :end-column 14, :end-line 138, :column 7, :line 138, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/do-alts, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :method-params ([fret ports opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fret ports opts])), :doc "returns derefable [val port] if immediate, nil if enqueued", :test true}, random-array {:protocol-inline nil, :meta {:arglists (quote ([n])), :private true, :end-column 20, :end-line 107, :column 8, :line 107, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :private true, :name cljs.core.async/random-array, :variadic false, :file "out/cljs/core/async.cljs", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :test true}, ->t22394 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([cs ch mult meta22395])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t22394, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([cs ch mult meta22395]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 426, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cs ch mult meta22395])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, Mix {:meta {:protocol-info {:methods {admix* [[m ch]], unmix* [[m ch]], unmix-all* [[m]], toggle* [[m state-map]], solo-mode* [[m mode]]}}, :protocol-symbol true, :doc nil, :end-column 17, :end-line 474, :column 14, :line 474, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol-symbol true, :name cljs.core.async/Mix, :file "out/cljs/core/async.cljs", :end-column 17, :column 1, :line 474, :protocol-info {:methods {admix* [[m ch]], unmix* [[m ch]], unmix-all* [[m]], toggle* [[m state-map]], solo-mode* [[m mode]]}}, :info nil, :end-line 474, :impls #{cljs.core.async/t22786 cljs.core.async/t22677}, :doc nil, :test true}, toggle* {:protocol-inline nil, :meta {:arglists (quote ([m state-map])), :doc nil, :protocol cljs.core.async/Mix, :end-column 11, :end-line 478, :column 4, :line 478, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :protocol cljs.core.async/Mix, :name cljs.core.async/toggle*, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([m state-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 478, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m state-map])), :doc nil, :test true}, mult {:protocol-inline nil, :meta {:arglists (quote ([ch])), :doc "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap put throws an exception, it will be removed from the mult.", :end-column 11, :end-line 412, :column 7, :line 412, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/mult, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 412, :end-line 412, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch])), :doc "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap put throws an exception, it will be removed from the mult.", :test true}, t21603 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21603, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 5, :line 123, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat< {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f in] [f in buf-or-n]), :arglists ([f in] [f in buf-or-n]), :arglists-meta (nil nil)}, :arglists (quote ([f in] [f in buf-or-n])), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values in each collection produced by applying f to\n  each value taken from the source channel. f must return a\n  collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The channel will close when the source channel\n  closes.", :end-column 14, :end-line 298, :column 7, :line 298, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/mapcat<, :variadic false, :file "out/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f in] [f in buf-or-n]), :arglists ([f in] [f in buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f in] [f in buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 298, :end-line 298, :max-fixed-arity 3, :fn-var true, :arglists ([f in] [f in buf-or-n]), :doc "Takes a function and a source channel, and returns a channel which\n  contains the values in each collection produced by applying f to\n  each value taken from the source channel. f must return a\n  collection.\n\n  The returned channel will be unbuffered by default, or a buf-or-n\n  can be supplied. The channel will close when the source channel\n  closes.", :test true}, ->t22786 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta22787])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t22786, :variadic false, :file "out/cljs/core/async.cljs", :method-params ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta22787]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 526, :max-fixed-arity 11, :fn-var true, :arglists (quote ([change mix solo-mode pick cs calc-state out changed solo-modes attrs meta22787])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, unblocking-buffer? {:protocol-inline nil, :meta {:arglists (quote ([buff])), :doc "Returns true if a channel created with buff will never block. That is to say,\n   puts into this buffer will never cause the buffer to be full. ", :end-column 25, :end-line 35, :column 7, :line 35, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/unblocking-buffer?, :variadic false, :file "out/cljs/core/async.cljs", :end-column 25, :method-params ([buff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buff])), :doc "Returns true if a channel created with buff will never block. That is to say,\n   puts into this buffer will never cause the buffer to be full. ", :test true}, t21606 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t21606, :file "out/cljs/core/async.cljs", :type true, :anonymous true, :column 5, :line 123, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, put! {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([port val] [port val fn0] [port val fn0 on-caller?]), :arglists ([port val] [port val fn0] [port val fn0 on-caller?]), :arglists-meta (nil nil nil)}, :arglists (quote ([port val] [port val fn0] [port val fn0 on-caller?])), :doc "Asynchronously puts a val into port, calling fn0 (if supplied) when\n   complete. nil values are not allowed. Will throw if closed. If\n   on-caller? (default true) is true, and the put is immediately\n   accepted, will call fn0 on calling thread.  Returns nil.", :end-column 11, :end-line 87, :column 7, :line 87, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/put!, :variadic false, :file "out/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([port val] [port val fn0] [port val fn0 on-caller?]), :arglists ([port val] [port val fn0] [port val fn0 on-caller?]), :arglists-meta (nil nil nil)}, :method-params ([port val] [port val fn0] [port val fn0 on-caller?]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 4, :fn-var true, :arglists ([port val] [port val fn0] [port val fn0 on-caller?]), :doc "Asynchronously puts a val into port, calling fn0 (if supplied) when\n   complete. nil values are not allowed. Will throw if closed. If\n   on-caller? (default true) is true, and the put is immediately\n   accepted, will call fn0 on calling thread.  Returns nil.", :test true}, take! {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([port fn1] [port fn1 on-caller?]), :arglists ([port fn1] [port fn1 on-caller?]), :arglists-meta (nil nil)}, :arglists (quote ([port fn1] [port fn1 on-caller?])), :doc "Asynchronously takes a val from port, passing to fn1. Will pass nil\n   if closed. If on-caller? (default true) is true, and value is\n   immediately available, will call fn1 on calling thread.\n   Returns nil.", :end-column 12, :end-line 64, :column 7, :line 64, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/out/cljs/core/async.cljs"}, :name cljs.core.async/take!, :variadic false, :file "out/cljs/core/async.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([port fn1] [port fn1 on-caller?]), :arglists ([port fn1] [port fn1 on-caller?]), :arglists-meta (nil nil)}, :method-params ([port fn1] [port fn1 on-caller?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 3, :fn-var true, :arglists ([port fn1] [port fn1 on-caller?]), :doc "Asynchronously takes a val from port, passing to fn1. Will pass nil\n   if closed. If on-caller? (default true) is true, and value is\n   immediately available, will call fn1 on calling thread.\n   Returns nil.", :test true}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:priority :default :recur :else :pause :mute :solo :solos :mutes :reads :cljs.core.async/nothing], :seen #{:mutes :solo :cljs.core.async/nothing :else :default :recur :priority :solos :pause :mute :reads}}, :doc nil}