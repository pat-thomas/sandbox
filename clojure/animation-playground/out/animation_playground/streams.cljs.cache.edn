;; Analyzed by ClojureScript 0.0-3211
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name animation-playground.streams, :imports nil, :requires {cljs.core.async cljs.core.async, async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, >! cljs.core.async}, :defs {consume-stream-async {:protocol-inline nil, :meta {:arglists (quote ([stream len handler-fn])), :end-column 27, :end-line 22, :column 7, :line 22, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/src/animation_playground/streams.cljs"}, :name animation-playground.streams/consume-stream-async, :variadic false, :file "src/animation_playground/streams.cljs", :end-column 27, :method-params ([stream len handler-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([stream len handler-fn])), :test true}, compose-stream {:protocol-inline nil, :meta {:arglists (quote ([handler-fn input-stream])), :end-column 21, :end-line 14, :column 7, :line 14, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/src/animation_playground/streams.cljs"}, :name animation-playground.streams/compose-stream, :variadic false, :file "src/animation_playground/streams.cljs", :end-column 21, :method-params ([handler-fn input-stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler-fn input-stream])), :test true}, make-stream {:protocol-inline nil, :meta {:arglists (quote ([handler-fn initial-state])), :end-column 18, :end-line 5, :column 7, :line 5, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/src/animation_playground/streams.cljs"}, :name animation-playground.streams/make-stream, :variadic false, :file "src/animation_playground/streams.cljs", :end-column 18, :method-params ([handler-fn initial-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler-fn initial-state])), :test true}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:recur :else :done], :seen #{:done :else :recur}}, :doc nil}