;; Analyzed by ClojureScript 0.0-3211
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name animation-playground.core, :imports nil, :requires {streams animation-playground.streams, animation-playground.streams animation-playground.streams, a cljs.core.async, cljs.core.async cljs.core.async, reagent.core reagent.core, reagent reagent.core}, :uses nil, :defs {render-simple {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 20, :end-line 29, :column 7, :line 29, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/src/animation_playground/core.cljs"}, :name animation-playground.core/render-simple, :variadic false, :file "src/animation_playground/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, simple-component {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 23, :end-line 20, :column 7, :line 20, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/src/animation_playground/core.cljs"}, :name animation-playground.core/simple-component, :variadic false, :file "src/animation_playground/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, app-state {:meta {:end-column 15, :end-line 13, :column 6, :line 13, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/src/animation_playground/core.cljs"}, :file "src/animation_playground/core.cljs", :line 13, :column 1, :end-line 13, :end-column 15, :test true, :name animation-playground.core/app-state}, reload-hook {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(files)], :arglists [[& files]], :arglists-meta (nil)}, :arglists (quote ([& files])), :end-column 18, :end-line 9, :column 7, :line 9, :file "/Users/pthomas/projects/personal/sandbox/clojure/animation-playground/src/animation_playground/core.cljs"}, :name animation-playground.core/reload-hook, :variadic true, :file "src/animation_playground/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(files)], :arglists [[& files]], :arglists-meta (nil)}, :method-params [(files)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 0, :fn-var true, :arglists [[& files]], :test true}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:channels :state :walker :counter :div :p :p.someclass :strong :span :style :color :recur :else], :seen #{:color :channels :else :strong :recur :state :p.someclass :style :div :counter :walker :p :span}}, :doc nil}